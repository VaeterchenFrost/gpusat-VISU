@BOOK{Courcelle2012,
	AUTHOR = {Courcelle, Bruno AND Engelfriet, Joost},
	YEAR = {2012},
	TITLE = {Graph Structure and Monadic Second-Order Logic - A Language-Theoretic Approach},
	EDITION = {1},
	ISBN = {978-0-521-89833-1},
	PUBLISHER = {Cambridge University Press},
	ADDRESS = {Cambridge},
}

@report{pcgp2019,
	author = {Johannes K. Fichte},
	title = {Parameterized Complexity and its Applications in Practice},
	type = {pdf},
	institution = {TU Dresden, Germany},
	date = {06.05.2020},
	OPTsubtitle = {From Foundations to Implementations},
	OPTlanguage = {english},
	OPTnote = {Summer 2019 (May 6th – May 16th)},
	OPTlocation = {Jakarta, Indonesia},
	OPTmonth = {May},
	OPTpages = {162-174},
}
@article{evaluationMSO,
	author = {Langer, Alexander and Reidl, Felix and Rossmanith, Peter and Sikdar, Somnath},
	year = {2012},
	month = {01},
	pages = {},
	title = {Evaluation of an MSO-solver},
	journal = {Proc. of ALENEX 2012},
	doi = {10.1137/1.9781611972924.5}
}

@article{ROBERTSON198449,
	title = "Graph minors. III. Planar tree-width",
	journal = "Journal of Combinatorial Theory, Series B",
	volume = "36",
	number = "1",
	pages = "49 - 64",
	year = "1984",
	issn = "0095-8956",
	doi = "https://doi.org/10.1016/0095-8956(84)90013-3",
	url = "http://www.sciencedirect.com/science/article/pii/0095895684900133",
	author = "Neil Robertson and P.D Seymour",
	abstract = "The “tree-width” of a graph is defined and it is proved that for any fixed planar graph H, every planar graph with sufficiently large tree-width has a minor isomorphic to H. This result has several applications which are described in other papers in this series."
}

@inproceedings{SAT1971,
	author = {Cook, Stephen A.},
	title = {The Complexity of Theorem-Proving Procedures},
	year = {1971},
	isbn = {9781450374644},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/800157.805047},
	doi = {10.1145/800157.805047},
	booktitle = {Proceedings of the Third Annual ACM Symposium on Theory of Computing},
	pages = {151–158},
	numpages = {8},
	location = {Shaker Heights, Ohio, USA},
	series = {STOC ’71}
}

@BOOK{DiplomarbeitZisser,
	author = {Zisser, Markus},
	title = {Solving the #SAT problem on the GPU with dynamic programming and OpenCL},
	address = {Wien},
	YEAR = {2018},
	Language = {English},
	url={http://katalog.ub.tuwien.ac.at/AC15055950},
	location = {Technische Universität Wien},
	abstract = {ger:; eng: There are many computational hard problems in computer science and a variety of these problems can be expressed via Boolean formulas. For some of these problems, the number of satisfying assignments can be directly linked to the solution. The task to compute the number of solutions of a Boolean formula is called the #SAT problem. Algorithms in artificial intelligence and machine learning tasks have profited from the massive parallelism provided by Graphic Processing Units (GPUs). However many current #SAT solvers rely on techniques from Satisfiability solving or approximate solving based on sampling of the search space. A central method for solving the Satisfiability problem is Conflict Driven Clause Learning (CDCL), but CDCL contains parts which are hard to or not parallelizable at all. CDCL does not work well on the GPU since parallelization on the GPU requires an algorithm with many similar independent steps. Dynamic Programming (DP) on tree decompositions on the other hand parallelizes well as we can execute many similar operations which are independent from another. For DP we need tree decompositions with a sufficiently small width. In the course of this thesis we developed gpusat, a #SAT solver which is based on dynamic programming on tree decompositions with OpenCL, an open standard that can be used to parallelize tasks on the GPU. We use tree decompositions of the primal, incidence and dual graph as base for our dynamic programming algorithms. gpusat is also able to solve Weighted Model Counting (WMC) where a weight is assigned to every literal and the weight of a solution is the product of its literal weights. To compare gpusat with other solvers we collected #SAT and WMC instances from different sources, and generated tree decompositions of the primal, incidence and dual graph for each of these instances. Then we compared the runtime of gpusat with other state of the art #SAT and WMC solvers on our instances. To get a better understanding of our benchmark set we also generated an overview of the tree width for our benchmark instances. Our experiments have shown that gpusat is competitive with other solvers for a tree width of up to 30. We were also able to solve some instances with a tree width of up to 45. About half of the instances had a width of 30 or below.},
}
